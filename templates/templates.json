{
    "basic_structure": {
        "name": "Basic Problem Structure",
        "description": "Basic template for Project Euler problems",
        "code": "\"\"\"\nProject Euler Problem {problem_number}\n\"\"\"\n\ndef solve():\n    \"\"\"\n    Your solution goes here.\n    This function should return the answer to the problem.\n    \"\"\"\n    # Your code here\n    return None\n\nif __name__ == \"__main__\":\n    print(solve())\n"
    },
    "prime_numbers": {
        "name": "Prime Number Generator",
        "description": "Efficient prime number generator using Sieve of Eratosthenes",
        "code": "def generate_primes(limit):\n    \"\"\"\n    Generate all prime numbers up to limit using Sieve of Eratosthenes.\n    Returns a list of primes.\n    \"\"\"\n    sieve = [True] * (limit + 1)\n    sieve[0] = sieve[1] = False\n    \n    for i in range(2, int(limit ** 0.5) + 1):\n        if sieve[i]:\n            sieve[i*i::i] = [False] * len(sieve[i*i::i])\n    \n    return [i for i, is_prime in enumerate(sieve) if is_prime]\n"
    },
    "fibonacci": {
        "name": "Fibonacci Sequence",
        "description": "Efficient Fibonacci number generator",
        "code": "def fibonacci(n):\n    \"\"\"\n    Generate the nth Fibonacci number using dynamic programming.\n    \"\"\"\n    if n <= 1:\n        return n\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n"
    },
    "gcd_lcm": {
        "name": "GCD and LCM",
        "description": "Greatest Common Divisor and Least Common Multiple",
        "code": "def gcd(a, b):\n    \"\"\"\n    Calculate Greatest Common Divisor using Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"\n    Calculate Least Common Multiple using GCD.\n    \"\"\"\n    return a * b // gcd(a, b)\n"
    },
    "pandigital": {
        "name": "Pandigital Number Checker",
        "description": "Check if a number is pandigital (contains all digits 1-9 exactly once)",
        "code": "def is_pandigital(n, start=1, end=9):\n    \"\"\"\n    Check if a number is pandigital (contains all digits from start to end exactly once).\n    \"\"\"\n    s = str(n)\n    return len(s) == end - start + 1 and set(s) == set(str(i) for i in range(start, end + 1))\n"
    },
    "palindrome": {
        "name": "Palindrome Checker",
        "description": "Check if a number or string is a palindrome",
        "code": "def is_palindrome(n):\n    \"\"\"\n    Check if a number or string is a palindrome.\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\n"
    },
    "digit_sum": {
        "name": "Digit Sum Calculator",
        "description": "Calculate the sum of digits in a number",
        "code": "def digit_sum(n):\n    \"\"\"\n    Calculate the sum of digits in a number.\n    \"\"\"\n    return sum(int(d) for d in str(n))\n"
    },
    "factorial": {
        "name": "Factorial Calculator",
        "description": "Calculate factorial of a number",
        "code": "def factorial(n):\n    \"\"\"\n    Calculate factorial of a number using iterative approach.\n    \"\"\"\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n"
    },
    "divisors": {
        "name": "Divisors Calculator",
        "description": "Find all divisors of a number",
        "code": "def get_divisors(n):\n    \"\"\"\n    Find all divisors of a number.\n    Returns a sorted list of divisors.\n    \"\"\"\n    divisors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return sorted(divisors)\n"
    },
    "prime_factors": {
        "name": "Prime Factorization",
        "description": "Find prime factors of a number",
        "code": "def prime_factors(n):\n    \"\"\"\n    Find prime factors of a number.\n    Returns a dictionary of prime factors and their exponents.\n    \"\"\"\n    factors = {}\n    # Handle 2 separately\n    while n % 2 == 0:\n        factors[2] = factors.get(2, 0) + 1\n        n //= 2\n    \n    # Check odd numbers up to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n //= i\n        i += 2\n    \n    # If n is a prime > 2\n    if n > 2:\n        factors[n] = 1\n    \n    return factors\n"
    },
    "pythagorean_triples": {
        "name": "Pythagorean Triples Generator",
        "description": "Generate primitive Pythagorean triples",
        "code": "def generate_pythagorean_triples(limit):\n    \"\"\"\n    Generate primitive Pythagorean triples where a + b + c <= limit.\n    Returns a list of (a, b, c) tuples.\n    \"\"\"\n    triples = []\n    for m in range(2, int((limit/2)**0.5) + 1):\n        for n in range(1, m):\n            if (m - n) % 2 == 1 and gcd(m, n) == 1:\n                a = m*m - n*n\n                b = 2*m*n\n                c = m*m + n*n\n                if a + b + c <= limit:\n                    triples.append((a, b, c))\n    return triples\n"
    },
    "combinatorics": {
        "name": "Combinatorics Functions",
        "description": "Common combinatorics functions (combinations, permutations)",
        "code": "def combinations(n, k):\n    \"\"\"\n    Calculate number of combinations (n choose k).\n    \"\"\"\n    if k > n:\n        return 0\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - k + i) // i\n    return result\n\ndef permutations(n, k):\n    \"\"\"\n    Calculate number of permutations (n P k).\n    \"\"\"\n    if k > n:\n        return 0\n    result = 1\n    for i in range(n - k + 1, n + 1):\n        result *= i\n    return result\n"
    }
}